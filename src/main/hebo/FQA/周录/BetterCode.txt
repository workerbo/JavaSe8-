[减少分支判断（策略模式+工厂模式）](https://blog.csdn.net/xiyang_1990/article/details/105055362)
1.内外接口（判断分离在多个方法里）
2.业务多态化（将具体的执行过程分布在子类方法中）
3.map存储（根据类型得到class对象，反射得到对象后执行方法）  多个类（业务）--》多个方法--》工厂类（根据类型获取，但又出现了分支）--》map存储

根据状态（Type）选择不同的策略类（内部类）【同一状态下不同场景对应不同方法】。类似工厂模式【map存放、枚举+反射】



简化Switch  map存枚举-对应业务逻辑，每个枚举值不同实现
Spring Bean的注册
这种需求，可以借用Spring种提供的InitializingBean接口，这个接口为Bean提供了属性初始化后的处理方法，它只包括afterPropertiesSet方法，凡是继承该接口的类，在bean的属性初始化后都会执行该方法。


无论参数是基本数据类型，还是引用数据类型，只要加了final，不好意思，该参数不可以再赋值（实参传进来给形参，就相当于初始化完成）。。。。可以防止在方法里面不小心重新赋值，造成一些不必要的麻烦

Optional<T>+Lambda可以让我们少写很多ifElse块
ifPresernt()
map()
orElse()
orEleseGet()

减少空指针
1.强制约束，我们可以通过jsr 303进行严格的约束声明：（新项目）
2.文档性约束  jsr 305规范（老项目）
3.空集合返回值 ：如果有集合这样返回值时，除非真的有说服自己的理由，否则，一定要返回空集合，而不是null
4.Optional不要作为参数、只有当考虑它返回null是合理的情况下，才进行Optional的返回

将不使用的引用类型变量置为空。
原因：JVM的CG机制的“bug”（在同一运行栈中，块级局部变量未使用，又未经过java栈优化，导致未CG）
结论：概率小，只在合适的地方用！



后缀补全

var 声明  变量.var
null 判空  变量.null
for/fori  集合、数组.for/fori
if       条件.if
cast
return

调试
1. 条件断点
2. 强制返回：IDEA 可以在打断点的方法栈处，强制返回你想要的方法返回值给调用方。非常灵活！
模拟异常：IDEA 可以在打断点的方法栈处，强制抛出异常给调用方。这个在调试源码的时候非常有用。
3.方法栈可以查看调用逻辑
4. Evaluate Expression：IDEA 还可以在调试代码的时候，动态修改当前方法栈中变量的值，方便我们的调试。

可以提高千倍效率的Java代码小技巧
来源：cnblogs.com/Qian123/p/6046096.html
一、MyBatis 不要为了多个查询条件而写 1 = 1
数据库系统就无法使用索引等查询优化策略
2.初始化集合时尽量指定其大小
3.若需频繁调用Collection.contains 方法则使用Set
4.BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。
/ BigDecimal 正例
BigDecimal bigDecimal1 = bigDecimal.valueOf(0.11D);
9.枚举的属性字段必须是私有且不可变



=====代码笔记=====
1.异常处理先打印堆栈或者记录日志。再做数据处理，避免又触发异常！ 在controller捕获后可以返回到前端提示错误消息
2.异常处理一定要记录堆栈！  e  特别是捕获后没抛出的。
3.返回值和获取值得时候判断是否为空。为空可以返回空串！
4.系统调用的时候注意多语言传过来的lang值
5.uat更新代码一定要测试通过后才能更新、要注意所有操作的细节 所有代确认事项提前沟通

6.空指针出现的原因：我们传入的参数可能在某些时候前台可以不填（逻辑变了）。我们传参和得参时也要注意空检查

7.不同环境下的异常，要检查配置，数据库数据是否完整
8。前端要注意浏览器兼容性和版本差异
9。在写代码的时候要考虑各种极端情况，写好异常处理和返回提示。


criteria 避免简单的SQL编写（直接通过java生成SQL执行）

蓝屏之后之后清除缓存

Excel导出选中【除了传ID外，可以设置查询条件，传查询条件
】
Set与List之间转化
日志规范：
log.error(String.format("[接口名或操作名] [Some Error Msg] happens. [%s]. [Probably Because]. [Probably need to do].", params));

打印数组  Arrays.toString(a);

从流中读取，写入流中
流的读写可以总结为从输入流读取，从输出流写出，这个过程我们定义为拷贝。

主要的技能要求：

- [ ]  pdf打印
- [ ]  excel导入导出
- [ ]  报表
- [ ]  webservice websocket
- [ ]  权限 oauth

  1.熟悉hap2.熟悉业务逻辑 【必要情况下的流程图】3.考虑代码是否共用 4.否定及时响应

   2.管理和查询分为两个界面

   3.状态回退机制

   4.在前端获取快码（做下拉框的选项），在后端获取（通过配置更改执行的代码）【】

    @Autowired
        private ICodeService codeService;
        String skip = codeService.getCodeMeaningByValue(iRequest, "XDWL.CONFIG", "SKIP_OA");

   5.编码规则用于编写number

   6.常量包和异常包（多建异常类

）和注解包

  7.前端页面参考报销页面

  8.事务  级别‘；required_new(开启子事务，可以隔开)  required (父子方法用同一个事务,必须都抛出异常)  事务嵌套

9.多参数用类或者map封装

10.模块封装要开扣子   有参数和无参数方法（无参调用有参）

11.调用方需要进行 null 判断防止 NPE 问题。


0.redis 缓存问题 必须重启项目
1.property 'substring' of undefined JS提示方法未定义，一般是调用方法的数据的问题
2.JS注意变量重名，未定义或者undefind或者类型的检查
3.新增页面的时候配置后重启防止403错误
4.JS中括号方式接受变量访问属性
5.一般情形下用尽量用Kendo的方式写前端逻辑
6.望名知意，模块功能清晰
7.小数前端 toFixd 后端Decimal 进行计算
8.类型自动转换问题。
9.不同分支切换导致的代码混乱
10.迁库导致ID变化 序列自增。
11.更改已有的代码应该评估造成的影响。搜索是否公用
12.正式和测试不同的数据导致的问题
13.git push 之前更新

14.前端不显示，页面语法一般有问题

15.in子句限制1000条

16.查看和调试代码（前端后台控制台加日志）

17.理清楚业务逻辑后动代码

18.逻辑应该尽量简洁

19.查询应该去除前后的特殊符号



使用责任链模式实现一个符合开闭原则的判断流程