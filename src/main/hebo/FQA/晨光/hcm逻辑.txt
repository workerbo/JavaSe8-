=====接口模块
1.采购合同提交审批
  1.状态变为审批中（顺序）
  2.传输文件（TIB口代理传输到BPM口  在实现层通过HTTPClient发送请求。）
  3.系统ws接受文件传输后BPM返回的状态（等待被调用）
  4.再次在实现层处理通过HTTPClient发送请求（再次向BPM调用）
  5.接受返回。
  6.通过后向SAP发送信息（需要将SAP需要的字段JSON化）
  
  --通过前端的日志直接搜索（注意此处日志的实现原理、redis缓存）
  
  合同提交  
  迁移文件==》BPM    从fastdfs获取，迁移到应用服务器指定目录。通过TB口利用FTP传送到BPM
  BPM ===》 文件传输结果  在被调用期间触发向BPM传送数据的调用
  合同数据 ===》BPM
  BPM审批状态===》合同   在被调用期间触发向SAP的调用（销售类合同、采购类合同、销售订单）
  特定类型合同，审批完成==》SAP创建订单。

本地：MFT服务   307S  来源单位（dev）  
环境方面
uat  应用名  hcm
dev  应用名  hcm_dev
接口中的文件传输
1、HCBM把文件迁移至指定发送目录（TB口配置有指定路径）;
2、HCBM发送接口请求TB口“传输文件”；
3、TB口自行取HCBM发送目录下的文件，通过ftp传输至对方系统的接收目录（TB口配置有指定路径）；
4、TB口传输成功，调用HCBM接口，通知HCBM，文件传输成功；

=======登陆
1.LogController控制登陆
2.userlogincontroller  sso登陆



==============
合同变更模块
变更编辑是kendowindow+面包屑

公司与组织：首先创建公司，然后创建组织，并将组织关联公司（根组织与公司一致）
岗位与组织：组织维护完成后创建岗位，并将岗位关联组织
岗位与员工：岗位维护完成后创建员工，并将员工关联岗位


1.公司、组织等权限数据范围   组织表和组织权限表连接   过滤公司权限 或者 组织权限
2.分配方式   
3.动态列格式值。
4.属性组维护。缺失
5.合同授权管理。 缺失
6.合同类型
7.合同跟踪



动态合同列：
合同数据
合同配置数据  通过配置列分配得到动态列规则
快码列表


==========
合同创建模块
1.根据已有的合同创建。所有的都是全部复制的，包括文件


=========================
redis的使用


实现cache接口的实现类通过代码块设置在启动时加载缓存数据。在增删改的时候调用实现类的reload方法


===============
Oracle数据库的使用

sql语句
备份和日志
导入导出
基本结构和概念
锁和事务

===============
配置文件
属性配置文件的读取
前端提示消息参考hap.kendo.js

=================
面包屑模块

=========
spring security  权限处理方案

这是一种基于Spring AOP和Servlet过滤器的安全框架。它提供全面的安全性解决方案，同时在Web请求级和方法调用级处理身份确认和授权。
Spring Security充分利用了依赖注入和面向切面技术
通过建立filter和相关的service bean来实现框架的认证机制（访问权限控制）

配置
web.xml中添加spring security的代理filter。
然后我们看看全局配置文件applicationContext-security.xml
对应路径:/hap/src/main/resources/spring/applicationContext-security.xml
oauth2Security.xml  :  Spring框架默认的Spring Security配置文件  2.Oauth应该属于Security的一部分
standardSecurity.xml  :  框架自定义的spring security配置文件
认证部分可以参考如下
https://www.iteye.com/blog/yunhaifeiwu-286411



==========
异常处理方案

1.异常处理先打印堆栈或者记录日志。再做数据处理，避免又触发异常！ 
2.在controller捕获后可以返回到前端提示错误消息。前端一般用封装好的增删改查方法，有良好的提示！
3.同一事务中，子方法异常，一定要抛出让调用方能捕获。否则事物回滚异常！
4.如果controller未处理异常，则统一在basecontroller的exceptionHandler中进行异常处理（分接口类和页面类）。自定义异常类 BaseException

============
aop审计方案
1.编写切面类，对所有web请求做记录。环绕通知
2.记录操作内容：类+方法+单据ID，记录时间、操作人。如果发生异常，记录异常内容，并标记操作结果

Spring AOP 基于注解实现日志记录+自定义注解（框架是在反射的基础上开了口子）
仅使用环绕通知就可以实现前置通知、后置通知、异常通知、最终通知等的效果。
https://blog.csdn.net/weixin_42184707/article/details/80348103


=======
标密工具方案（只有正式和uat要求：即国密网）
方案要求：利用甲方提供的标密插件对文件加密。对根据人员密级，单据密级做校验

1.代理工具对象，因此将这部分逻辑解耦到一个单独的应用当中
2.将密级信息和csrf信息传入加密应用当中（以拼接URL的方式）
3.以打开新窗口的形式请求加密应用
4.在加密应用中加密、密级校验，然后上传文件。（向HCM发起请求）
5.hcm接收到文件后设置session中上传状态。前端通过定时器不断获取上传状态，直到上传成功或失败。

主要点：1.JS以对象配置的方式完成封装，如果未配置则采用默认值。并且易于扩展
       2.以定时器的方式不断询问上传状态，直到成功或者失败。


==========网关集承方案（伪单点）
通过传过来的认证方式和认证凭证（身份ID）获取到用户的用户名和密码（此处URL不加权限控制）
然后模拟表单登陆（走认证授权流程）

==========IE兼容插件下载方案
hcm系统兼容IE浏览器的插件。
0.登陆页面判断浏览器名称，如果是IE，则下载插件
1.从快码或者配置文件得到插件下载地址
2.第一次下载插件之后，浏览器被内嵌Chrome框架（所以之后的appName是netSpace）


==========Excel导入导出方案
a.kendoui组件的导入导出（也是利用POI）
b.纯POI的导入导出 （注解校验的应用）。用户管理中导入时要加上默认md5后的密码。

==========离线安装部署方案（一整套环境）



========
人员密级方案



=========
三员方案




=================
onlyoffice：文档预览、文档转换

通过onlyoffice fileKey进行加载    /api/onlyoffice/file/back进行保存  这部分正常
文件打印：如果是doc转化为pdf
确认是由文本更新引起的问题

/dwp/contract/text/view 加载页面和数据
文本预览API 分不同状态  
E状态下   直接进入页面
1.查询文本属性值  queryById
2.填充文本  fileURL  得到template   
3.文本域 query 
4.通过 /api/onlyoffice/file/getfile  加载文本文件

/pdfVieForFinal

============文件上传和下载方案（先忽略加密过程）

=======文件上传
  用fastdfs做文件存储系统。
1.常规springMVC 的文件上传，调用fastdfs的接口上传文件，通过sysfile进行记录文件信息（文件名或者URL）。
2.更新文件相关单据的元信息记录。（例如文本状态，是否修改）如果不是第一次上传，删除文件及记录，更新新文件ID和name到元信息。
单据文件上传====》单据元信息处理====》文件元信息处理====》文件上传（fastdfs）


主要点：1.多个方法重载【一个参数拆成多个参数，逻辑分解】，便于调用。
2.用self（）方法即代理类调用其他方法。便于AOP切入生效！
3.可以同过@value注解向配置文件取值！

=======文件下载
1.通过fileId 获取在HCMSYSFILE中的文件记录
2.得到url从fastdfs下载文件
3.解密后通过文件输出流传到响应输出流。

向BPM提交的时候doc文档会生成pdf

==========
禁止用户重复登录
利用redis和websocket。



========前端UI解决方案
========前端开发解决方案
前端开发的时候可以将常量统一放在一个对象当中


